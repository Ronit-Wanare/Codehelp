class Solution {
public:
typedef pair<int,int> ppi ; 
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        unordered_map<int,vector<ppi>>adj ; 
        for(auto i : flights){
            adj[i[0]].push_back({i[1],i[2]});
        }
        //vector<int>price(n+1,INT_MAX);
        queue<pair<int,pair<int,int>>>q ;
        vector<int>dist(n+1,1e9);
        dist[src] = 0 ;  
        q.push({0,{src,0}});
        dist[src] = 0;

        while(!q.empty()){
            auto lol = q.front();
            q.pop(); 

            int stops = lol.first;
            int currn = lol.second.first ; 
            int currd = lol.second.second;

            for(auto nei : adj[currn]){
                if(stops <= k and currd + nei.second < dist[nei.first]){
                    dist[nei.first] = currd + nei.second ; 
                    q.push({stops+1,{nei.first,dist[nei.first]}});
                }
            }

        }

        if(dist[dst]>=1e9) return -1;
        return dist[dst];

    }
};
